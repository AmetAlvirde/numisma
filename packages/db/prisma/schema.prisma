// This file defines the database schema for the Numisma application
// It represents the central data model for portfolio and position tracking

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ==========================================
// CORE FINANCIAL ENTITIES
// ==========================================

// Asset model - represents any financial instrument independent of trading pairs
model Asset {
  id          String  @id @default(cuid())
  name        String // Full name: "Bitcoin", "Tesla, Inc."
  ticker      String // Market symbol: "BTC", "TSLA"
  assetType   String // "crypto", "stock", "forex", "commodity", etc.
  description String?
  // Add missing fields from Numisma types
  network           String?
  contractAddress   String?
  iconUrl           String?
  category          String?
  marketData        Json?     // Current market data as JSON

  // Relations
  baseMarkets  Market[] @relation("BaseAsset")
  quoteMarkets Market[] @relation("QuoteAsset")
  

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([ticker, assetType])
  @@map("assets")
}

// Market model - represents a trading venue for a pair of assets
model Market {
  id String @id @default(cuid())

  // The assets forming this market pair
  baseAsset    Asset  @relation("BaseAsset", fields: [baseAssetId], references: [id])
  baseAssetId  String
  quoteAsset   Asset  @relation("QuoteAsset", fields: [quoteAssetId], references: [id])
  quoteAssetId String

  // Market details
  marketSymbol String // E.g., "BTCUSDT", "TSLA", "EURUSD"
  pairNotation String // Standard notation like "BTC/USDT"

  // Additional market metadata
  exchange   String? // "Binance", "NYSE", etc.
  isTradable Boolean @default(true)

  // Relations
  positions Position[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([baseAssetId, quoteAssetId, exchange])
  @@index([marketSymbol, exchange])
  @@map("markets")
}

// WalletLocation model - represents where assets are stored
model WalletLocation {
  id           String @id @default(cuid())
  name         String // User-defined name for this location
  locationType AssetLocationType 

  // Exchange-specific details
  exchangeName String? // If location is "exchange"
  accountType  String? // If location is "exchange", e.g., "spot", "margin"

  // Cold storage details
  storageType String? // If location is "coldStorage", e.g., "hardware"
  storageName String? // If location is "coldStorage", e.g., "T1"

  // Relations
  userId    String // Owner of this wallet
  positions Position[] // Positions stored in this wallet

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("wallet_locations")
}

// Date handling enums
enum DateStatus {
  genesis
  actual
  estimated
  unknown
}

// Portfolio model - represents a collection of positions
model Portfolio {
  id          String   @id @default(cuid())
  name        String
  description String?
  dateCreated DateTime
  dateStatus  DateStatus @default(actual)
  status      String // "active" or "archived"
  userId      String
  tags        String[] // Array of tags for categorization
  notes       String?

  // Display metadata
  color     String?
  sortOrder Int?
  isPinned  Boolean? @default(false)

  // Relations
  portfolioPositions PortfolioPosition[]
  valuations         HistoricalValuation[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("portfolios")
}

// ==========================================
// POSITION MANAGEMENT
// ==========================================

// Position model - core entity for trading positions
model Position {
  id   String @id @default(cuid())
  name String

  // Market and wallet information
  market           Market         @relation(fields: [marketId], references: [id])
  marketId         String
  walletLocation   WalletLocation @relation(fields: [walletLocationId], references: [id])
  walletLocationId String
  walletType       String // "hot" or "cold" - denormalized for query convenience

  // Position management fields
  lifecycle   String // "planned", "active", "closed"
  capitalTier String // "C1", "C2", etc. - tracks origin of capital
  riskLevel   Int // 1-10 scale
  strategy    String // Trading strategy classification

  // Relations
  portfolioPositions PortfolioPosition[]
  lifecycleHistory   LifecycleHistory[]
  capitalTierHistory CapitalTierHistory[]
  positionDetails    PositionDetails      @relation(fields: [positionDetailsId], references: [id])
  positionDetailsId  String @unique
  metrics            PositionMetrics?
  thesis             Thesis?
  journalEntries     JournalEntry[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([lifecycle, marketId])
  @@map("positions")
}

// Junction table between Portfolio and Position with metadata
model PortfolioPosition {
  id           String    @id @default(cuid())
  portfolio    Portfolio @relation(fields: [portfolioId], references: [id])
  portfolioId  String
  position     Position  @relation(fields: [positionId], references: [id])
  positionId   String
  addedAt      DateTime
  addedBy      String // User ID who added this position
  isHidden     Boolean   @default(false)
  displayOrder Int

  @@unique([portfolioId, positionId])
  @@map("portfolio_positions")
}

// Lifecycle history for positions
model LifecycleHistory {
  id              String   @id @default(cuid())
  position        Position @relation(fields: [positionId], references: [id])
  positionId      String
  from            String // Previous lifecycle state
  to              String // New lifecycle state
  timestamp       DateTime
  timestampStatus DateStatus @default(actual)
  userId          String // Who made the change
  notes           String?
  relatedOrderIds String[] // Array of order IDs related to this change

  @@map("lifecycle_history")
}

// Capital tier history
model CapitalTierHistory {
  id             String   @id @default(cuid())
  position       Position @relation(fields: [positionId], references: [id])
  positionId     String
  from           String // Previous capital tier
  to             String // New capital tier
  timestamp      DateTime
  timestampStatus DateStatus @default(actual)
  amountSecured  Float
  relatedOrderId String? // Order ID related to this change
  notes          String?

  @@map("capital_tier_history")
}

// Thesis documenting the reasoning behind a position
model Thesis {
  id           String   @id @default(cuid())
  position     Position @relation(fields: [positionId], references: [id])
  positionId   String   @unique
  reasoning    String   @db.Text
  invalidation String?  @db.Text // Conditions that would invalidate the thesis
  fulfillment  String?  @db.Text // Target outcome representing thesis success
  notes        String?  @db.Text

  // Add missing fields from Numisma types
  technicalAnalysis   String?   @db.Text
  fundamentalAnalysis String?   @db.Text
  timeHorizon         String?
  riskRewardRatio     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("theses")
}

// Journal entries for subjective notes about positions
model JournalEntry {
  id          String   @id @default(cuid())
  position    Position @relation(fields: [positionId], references: [id])
  positionId  String
  thought     String   @db.Text
  attachments String[] // Array of file paths/URLs
  timestamp   DateTime
  timestampStatus DateStatus @default(actual)
  userId      String // Who wrote the entry

  // Add missing fields from Numisma types
  tags                String[]
  sentiment           String?   // "bullish", "bearish", "neutral"
  isKeyLearning       Boolean   @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("journal_entries")
}

// Position details - operational aspects of a position
model PositionDetails {
  id                String    @id @default(cuid())
  side              TradeSide 
  status            PositionStatus
  fractal           String // Time frame ("1D", "4H", "1W", etc.)
  initialInvestment Float
  currentInvestment Float
  recoveredAmount   Float     @default(0)
  dateOpened        DateTime?
  dateOpenedStatus  DateStatus @default(unknown)
  closedPercentage  Float     @default(0)

  // Add missing fields from Numisma types
  timeFrame          String    // Replacing "fractal" to match types
  averageEntryPrice  Float?
  averageExitPrice   Float?
  totalSize          Float?
  totalCost          Float?
  realizedProfitLoss Float?
  isLeveraged        Boolean   @default(false)
  leverage           Float?
  unrealizedProfitLoss Float?
  currentReturn      Float?
  targetPrice        Float?
  stopPrice          Float?
  riskRewardRatio    Float?

  // Relations
  position         Position?
  orders           Order[]
  stopLossOrders   StopLossOrder[]
  takeProfitOrders TakeProfitOrder[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("position_details")
}

// Position metrics - calculated performance values
model PositionMetrics {
  id            String   @id @default(cuid())
  position      Position @relation(fields: [positionId], references: [id])
  positionId    String   @unique
  realizedPnL   Float
  unrealizedPnL Float
  roi           Float
  maxDrawdown   Float
  duration      String // E.g., "10d" for 10 days

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("position_metrics")
}

// ==========================================
// ORDER MANAGEMENT
// ==========================================

// Order model - entry or exit for a position
model Order {
  id                String          @id @default(cuid())
  positionDetails   PositionDetails @relation(fields: [positionDetailsId], references: [id])
  positionDetailsId String
  dateOpen          DateTime?
  dateOpenStatus    DateStatus @default(unknown)
  dateFilled        DateTime?
  dateFilledStatus  DateStatus @default(unknown)
  averagePrice      Float?
  totalCost         Float?
  status            OrderStatus 
  type              OrderType 
  purpose           String? // "entry", "exit", etc.
  fee               Float?
  feeUnit           String?
  filled            Float?
  unit              String? // "base", "quote", "percentage"
  capitalTierImpact String? // Effect on capital tier
  notes             String?
  direction         String           // "entry" or "exit"
  exchangeOrderId   String?
  isAutomated       Boolean          @default(false)
  expiration        DateTime?
  expirationStatus  DateStatus @default(unknown)
  parentOrderId     String?
  isHidden          Boolean          @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("orders")
}

// Stop loss order - for risk management
model StopLossOrder {
  id                String          @id @default(cuid())
  positionDetails   PositionDetails @relation(fields: [positionDetailsId], references: [id])
  positionDetailsId String
  dateOpen          DateTime?
  dateOpenStatus    DateStatus @default(unknown)
  dateFilled        DateTime?
  dateFilledStatus  DateStatus @default(unknown)
  averagePrice      Float?
  totalCost         Float?
  status            String
  type              String
  fee               Float?
  feeUnit           String?
  filled            Float?
  trigger           Float?
  estimatedCost     Float?
  unit              String // Required for stop loss
  size              Float // Required for stop loss
  isTrailing        Boolean        @default(false)
  trailingDistance  Float?
  trailingUnit      String?        // "percentage" or "absolute"
  maxSlippage       Float?
  strategy          String?        // "breakeven", "partial", "full", "tiered"

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("stop_loss_orders")
}

// Take profit order - for capturing gains
model TakeProfitOrder {
  id                String          @id @default(cuid())
  positionDetails   PositionDetails @relation(fields: [positionDetailsId], references: [id])
  positionDetailsId String
  dateOpen          DateTime?
  dateOpenStatus    DateStatus @default(unknown)
  dateFilled        DateTime?
  dateFilledStatus  DateStatus @default(unknown)
  averagePrice      Float?
  totalCost         Float?
  status            String
  type              String
  fee               Float?
  feeUnit           String?
  filled            Float?
  trigger           Float?
  estimatedCost     Float?
  unit              String // Required for take profit
  size              Float // Required for take profit
  targetPercentage    Float?
  maxSlippage         Float?
  tier                Int?
  moveStopToBreakeven Boolean       @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("take_profit_orders")
}

// ==========================================
// VALUATION & REPORTING
// ==========================================

// Historical valuation for portfolios
model HistoricalValuation {
  id          String    @id @default(cuid())
  portfolio   Portfolio @relation(fields: [portfolioId], references: [id])
  portfolioId String
  timestamp   DateTime
  timestampStatus DateStatus @default(actual)

  // Temporal metadata
  year                Int
  month               Int?
  day                 Int?
  periodKey           String
  periodName          String
  timeFrameUnit       String
  periodStart         DateTime
  periodStartStatus   DateStatus @default(actual)
  periodEnd           DateTime
  periodEndStatus     DateStatus @default(actual)
  isTimeframeBoundary Boolean

  // Aggregation metadata
  isAggregated      Boolean @default(false)
  aggregationMethod String
  sourceGranularity String
  targetGranularity String

  // Valuation data
  totalValue        Float
  valueCurrency     String
  initialInvestment Float
  profitLoss        Float
  percentageReturn  Float

  // Position valuations as JSON
  positionValuations Json

  // Additional metadata
  isRetroactive Boolean @default(false)

  // Market context
  btcPrice       Float?
  ethPrice       Float?
  totalMarketCap Float?
  fearGreedIndex Int?

  // Add key analytics fields
  realizedProfitLoss    Float?
  unrealizedProfitLoss  Float?
  
  // Add fields for risk metrics
  volatility            Float?
  maxDrawdown           Float?
  sharpeRatio           Float?
  sortinoRatio          Float?
  calmarRatio           Float?
  
  // Add fields for return metrics
  dailyReturn           Float?
  weeklyReturn          Float?
  monthlyReturn         Float?
  quarterlyReturn       Float?
  yearlyReturn          Float?
  inceptionReturn       Float?

   // Position metrics
  positionCount         Int?
  
  // Keep using JSON for complex nested structures
  returnMetrics         Json?
  riskMetrics           Json?
  assetAllocation       Json?

  notes String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([portfolioId, timestamp])
  @@index([periodKey, timeFrameUnit])
  @@map("historical_valuations")
}

// Performance report model
model PerformanceReport {
  id                String @id @default(cuid())
  portfolioId       String
  reportType        String // "daily", "weekly", "monthly", "quarterly", "yearly", "custom"
  sourceGranularity String // "daily", "weekly", "monthly", "quarterly"

  // Period covered
  startDate         DateTime
  startDateStatus   DateStatus @default(actual)
  endDate           DateTime
  endDateStatus     DateStatus @default(actual)
  periodName        String

  // Report metadata
  generatedAt       DateTime
  generatedAtStatus DateStatus @default(actual)
  summary           Json // Contains startValue, endValue, percentageChange, etc.
  valuationIds      String[] // IDs of valuations included in this report
  timeSeriesIds     String[] // IDs of time series included

  // Benchmark comparison
  benchmarkComparison Json? // Optional comparison to market benchmark

  // Report generation metadata
  isScheduled Boolean @default(false)
  generatedBy String? // User who generated the report

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([portfolioId, reportType])
  @@map("performance_reports")
}

// ==========================================
// USER MANAGEMENT & SETTINGS
// ==========================================

// User model - for application users
model User {
  id           String  @id @default(cuid())
  email        String  @unique
  name         String?
  passwordHash String // Securely stored password hash
  isActive     Boolean @default(true)
  role         String  @default("user") // "user", "admin", etc.

  // User preferences
  preferences Json? // User preferences as JSON

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("users")
}

// System settings
model SystemSetting {
  id          String  @id @default(cuid())
  key         String  @unique
  value       String
  description String?
  isSecret    Boolean @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("system_settings")
}

// Enums added to ensure consistency with Numisma types:

enum PositionStatus {
  active
  closed
  partial
}

enum OrderStatus {
  submitted
  filled
  cancelled
  partially_filled
  expired
}

enum OrderType {
  trigger
  market
  limit
  trailing_stop
  oco
}

enum AssetLocationType {
  exchange
  dex
  cold_storage
  defi
  staking
  lending
}

enum TradeSide {
  long
  short
}

// Add these placeholder models

// Notification system
model Notification {
  id              String    @id @default(cuid())
  userId          String
  type            String    // NotificationType enum value
  title           String
  message         String
  priority        String    @default("medium") // NotificationPriority enum value
  isRead          Boolean   @default(false)
  isActioned      Boolean   @default(false)
  actionUrl       String?
  actionText      String?
  icon            String?
  data            Json?     // Additional structured data
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  
  @@index([userId, isRead])
}

// Price alerts
model PriceAlert {
  id                    String    @id @default(cuid())
  userId                String
  asset                 String    // Asset ticker
  targetPrice           Float
  direction             String    // "above" or "below"
  isPercentageChange    Boolean   @default(false)
  percentageChange      Float?
  repeating             Boolean   @default(false)
  isActive              Boolean   @default(true)
  lastTriggeredAt       DateTime?
  lastTriggeredStatus   DateStatus @default(unknown)
  customMessage         String?
  createJournalEntry    Boolean   @default(false)
  positionId            String?
  channels              String[]  // Array of notification channels
  createdAt             DateTime  @default(now())
  updatedAt             DateTime  @updatedAt
  
  @@index([userId, asset, isActive])
}

// Exchange integration
model ExchangeAccount {
  id              String    @id @default(cuid())
  userId          String
  exchange        String
  label           String
  apiKey          String
  apiSecret       String
  apiPassphrase   String?
  isConnected     Boolean   @default(false)
  lastSynced      DateTime?
  lastSyncedStatus DateStatus @default(unknown)
  status          String
  errorMessage    String?
  permissions     Json?     // Read/trade/withdraw permissions
  autoSync        Boolean   @default(true)
  syncFrequency   Int?
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  
  @@index([userId, exchange])
}

// Wallet tracking
model Wallet {
  id                String    @id @default(cuid())
  userId            String
  address           String
  label             String
  network           String
  type              String
  hardwareModel     String?
  isWatchOnly       Boolean   @default(false)
  includeInPortfolio Boolean  @default(true)
  lastKnownBalance  Json?
  notes             String?
  tags              String[]
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt
  
  @@index([userId, network])
  @@index([address, network])
}

// Trading metrics
model TradingMetrics {
  id                  String    @id @default(cuid())
  userId              String
  portfolioId         String?
  period              String    // "all_time", "yearly", "monthly", etc.
  periodStart         DateTime?
  periodStartStatus   DateStatus @default(unknown)
  periodEnd           DateTime?
  periodEndStatus     DateStatus @default(unknown)
  totalTrades         Int
  winningTrades       Int
  losingTrades        Int
  winRate             Float
  avgWinAmount        Float
  avgLossAmount       Float
  avgProfitLoss       Float
  maxConsecutiveWins  Int
  maxConsecutiveLosses Int
  maxDrawdown         Float
  profitFactor        Float
  expectancy          Float
  avgHoldingTime      String?
  stdDeviation        Float?
  byTradeType         Json?
  byAsset             Json?
  byTimeFrame         Json?
  createdAt           DateTime  @default(now())
  updatedAt           DateTime  @updatedAt
  
  @@index([userId, period])
}


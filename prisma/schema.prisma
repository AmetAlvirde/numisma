generator client {
  provider = "prisma-client-js"
  output   = "./generated/client"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                 String    @id @default(cuid())
  userId             String
  providerType       String
  providerId         String
  providerAccountId  String
  refreshToken       String?
  accessToken        String?
  accessTokenExpires DateTime?
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt
  user               User      @relation(fields: [userId], references: [id])

  @@unique([providerId, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  userId       String
  expires      DateTime
  sessionToken String   @unique
  accessToken  String   @unique
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  user         User     @relation(fields: [userId], references: [id])
}

enum DateStatus {
  ACTIVE
  HISTORICAL
  PROJECTED
}

model User {
  id            String      @id @default(cuid())
  name          String?
  email         String?     @unique
  emailVerified DateTime?
  image         String?
  password      String?
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  accounts      Account[]
  sessions      Session[]
  portfolios    Portfolio[]
}

model Portfolio {
  id                   String                @id @default(cuid())
  name                 String
  description          String?
  totalValue           Decimal               @db.Decimal(15, 2)
  isPinned             Boolean               @default(false)
  userId               String
  createdAt            DateTime              @default(now())
  updatedAt            DateTime              @updatedAt
  user                 User                  @relation(fields: [userId], references: [id], onDelete: Cascade)
  historicalValuations HistoricalValuation[]

  @@index([userId])
  @@index([userId, isPinned])
}

model HistoricalValuation {
  id          String     @id @default(cuid())
  portfolioId String
  value       Decimal    @db.Decimal(15, 2)
  timestamp   DateTime
  dateStatus  DateStatus @default(ACTIVE)
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  portfolio   Portfolio  @relation(fields: [portfolioId], references: [id], onDelete: Cascade)

  @@unique([portfolioId, timestamp])
  @@index([portfolioId, timestamp])
  @@index([portfolioId, dateStatus, timestamp])
}

model VerificationRequest {
  id         String   @id @default(cuid())
  identifier String
  token      String   @unique
  expires    DateTime
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@unique([identifier, token])
}
